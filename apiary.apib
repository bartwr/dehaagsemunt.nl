FORMAT: 1A

HOST: https://api.vooot.nl/

# voOot API
voOot is a service allowing consumers to interact with the voOot system. voOot makes it possible to store and retrieve municipal information.

## Authentication
Authentication is currently done by logging in with an email-address and password. Once logged in a JWT token is created. This token can be used for every request to make an autenticated call.

## Media Types
This API uses the json media-type to represent resources states and affordances.

Requests with a message-body are using plain JSON to set or update resource
states.

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.



# voOot API root [/]
voOot API entry point.

This resource does not have any attributes.
Instead it offerts the initial API affordances in the form of [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) links.


## Retrieve Entry Point [GET]

+ Request JSON
    + Headers

               Accept: application/json

+ Response 200 (application/json)
    + Body

            {
                "_links": {
                    "child": [
                        {
                            "href": "persons",
                            "title": "persons"
                        }
                    ]
                }
            }



# Group Authentication
This section describes the Events.


# Group Users


# Group Organisations


# Group Memberships


# Group Documents


# Group Events
This section describes the Events.

## Events [/events{?max_results}{?start_date}{?end_date}{?where}]
Collection of Events. *[/events]*

+ Model (application/json)
    HATEOAS/JSON representation of Event collection.

    + Headers

            Last-Modified: Tue, 30 Dec 2014 11:41:14 GMT

    + Body

            {
                "events": [
                    {
                        "id": "56c22429c03754d435667abb",
                        "createdAt": "2016-02-15T19:16:57.126Z",
                        "updatedAt": "2016-02-15T19:16:57.126Z",
                        "startDate": "2016-02-15T15:46:35.710Z",
                        "endDate": "2016-02-15T16:46:35.710Z",
                        "title": "Event title",
                        "description": "Event description"
                    },
                    {
                        "id": "56c22429c03754d435667abb",
                        "createdAt": "2016-02-15T19:16:57.126Z",
                        "updatedAt": "2016-02-15T19:16:57.126Z",
                        "startDate": "2016-02-15T15:46:35.710Z",
                        "endDate": "2016-02-15T16:46:35.710Z",
                        "title": "Event title",
                        "description": "Event description",
                        "location": "Event location"
                    }
                ]
            }

### List all events [GET]
Return all events.

+ Parameters
    + max_results (optional, integer, `25`) ... The maximum number of results to return
    + start_date (optional, date, `2`) ... The start date
    + end_date (optional, date, `2`) ... The end date
    + where (optional, string, `where={"role":"superuser"}`) ... Filters

+ Response 200

    [Events][]

### Create Event [POST]
Create a new Event.

+ Request (application/json)
    + Body

            {
                "startDate": "2016-02-15T15:46:35.710Z",
                "endDate": "2016-02-15T16:46:35.710Z",
                "createdAt": "2016-02-15T19:41:27.783Z",
                "updatedAt": "2016-02-15T19:41:27.783Z",
                "id": "56c229e701a15a373633632d",
                "title": "Event title",
                "description": "Event description",
                "location": "Event location"
            }

+ Response 201

    + Body

            {
                "code": "CREATED",
                "message": "The request has been fulfilled and resulted in a new resource being created",
                "data": {
                    "startDate": "2016-02-15T15:46:35.710Z",
                    "endDate": "2016-02-15T16:46:35.710Z",
                    "createdAt": "2016-02-15T19:41:27.783Z",
                    "updatedAt": "2016-02-15T19:41:27.783Z",
                    "id": "56c229e701a15a373633632d",
                    "title": "Event title",
                    "description": "Event description",
                    "location": "Event location"
                }
            }

+ Response 422 (application/json)
    + Body

            {
                "_error": {
                    "code": 422,
                    "message": "Insertion failure: 1 document(s) contain(s) error(s)"
                },
                "_issues": {
                    "login": "value m1ch3l is not unique"
                },
                "_status": "ERR"
            }

## Event [/events/{id}]
This resource represents one particular event identified by its *id*.

+ Parameters
    + id (required, string, `a5595d9b-75a5-4a18-8cd9-2cff9907b7ac`) ... Id of a user.

+ Model (application/json)
    HATEOAS/JSON representation of User resource.

    + login (required, string, 'm1ch3')
    + role (required, string, 'user')
    + email (required, string, 'm1ch3l@pathwar.net')
    + _id (required, uuid, 'a5595d9b-75a5-4a18-8cd9-2cff9907b7ac')

    + Headers

            ETag: 8f5d7df0210b75992b41834329c0abdea9a02bc2
            Last-Modified: Wed, 07 Jan 2015 16:43:17 GMT

    + Body

            {
                "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                "_etag": "8f5d7df0210b75992b41834329c0abdea9a02bc2",
                "_id": "a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                "_links": {
                    "collection": {
                        "href": "users",
                        "title": "users"
                    },
                    "parent": {
                        "href": "/",
                        "title": "home"
                    },
                    "self": {
                        "href": "users/a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                        "title": "user"
                    }
                },
                "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                "email": "m1ch3l@pathwar.net",
                "login": "m1ch3l",
                "role": "superuser"
            }

### Retrieve Event [GET]
Return the information for the Event
+ Request JSON
    + Headers

            Accept: application/json

+ Response 200

    [Event][]

+ Response 404 (application/json)

            {
                "_error": {
                    "code": 404,
                    "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."
                },
                "_status": "ERR"
            }

### Edit Event [PATCH]
Edit the information of the Event

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }

### Delete Event [DELETE]
Delete an Event
+ Request JSON
    + Headers

            Accept: application/json

+ Response 200

    [Event][]

+ Response 404 (application/json)

            {
                "_error": {
                    "code": 404,
                    "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."
                },
                "_status": "ERR"
            }


# Group Persons
This section describes about the Persons

## Persons [/persons{?max_results}{?page}{?where}]
Collection of Persons. *[/persons]*

+ Model (application/json)
    HATEOAS/JSON representation of Person collection.

    + Headers

            Last-Modified: Tue, 30 Dec 2014 11:41:14 GMT

    + Body

            {
                "_items": [
                    {
                        "_created": "Thu, 01 Jan 1970 00:00:00 GMT",
                        "_etag": "6a169281df830752d6752b916f73d1976282c6c4",
                        "_id": "53705c4b-7bf9-4672-a872-c84988e16db8",
                        "_links": {
                            "self": {
                                "href": "users/53705c4b-7bf9-4672-a872-c84988e16db8",
                                "title": "user"
                            }
                        },
                        "_updated": "Thu, 01 Jan 1970 00:00:00 GMT",
                        "login": "root",
                        "role": "admin"
                    },
                    {
                        "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "_etag": "ea3b5b1b3320749e8198d79243b829ca1439958b",
                        "_id": "67e1c418-63eb-4dd3-b2f0-e5d8487b979b",
                        "_links": {
                            "self": {
                                "href": "users/67e1c418-63eb-4dd3-b2f0-e5d8487b979b",
                                "title": "user"
                            }
                        },
                        "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "email": "joe@pathwar.net",
                        "login": "joe",
                        "role": "user"
                    },
                    {
                        "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "_etag": "8f5d7df0210b75992b41834329c0abdea9a02bc2",
                        "_id": "a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                        "_links": {
                            "self": {
                                "href": "users/a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                                "title": "user"
                            }
                        },
                        "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                        "email": "m1ch3l@pathwar.net",
                        "login": "m1ch3l",
                        "role": "superuser"
                    }
                ],
                "_links": {
                    "parent": {
                        "href": "/",
                        "title": "home"
                    },
                    "self": {
                        "href": "users",
                        "title": "users"
                    }
                },
                "_meta": {
                    "max_results": 25,
                    "page": 1,
                    "total": 3
                }
            }

### List all persons [GET]
Return all persons.

+ Parameters
    + max_results (optional, integer, `25`) ... The maximum number of results to return
    + page (optional, integer, `2`) ... The page number when using pagination
    + where (optional, string, `where={"role":"superuser"}`) ... Filters

+ Response 200

    [Persons][]

### Create Person [POST]
Create a new Person.

+ Request (application/json)
    + Body

            {
                "name": "m1ch3l",
                "email": "m1ch3l@pathwar.net",
                "password_blowfish": "xxxxxxxxxxxxx",
                "otp_secret": "xxxxxxxxxxxxx",
                "role": "user"
            }

+ Response 201

    [Person][]

+ Response 422 (application/json)
    + Body

            {
                "_error": {
                    "code": 422,
                    "message": "Insertion failure: 1 document(s) contain(s) error(s)"
                },
                "_issues": {
                    "login": "value m1ch3l is not unique"
                },
                "_status": "ERR"
            }

## Person [/persons/{id}]
This resource represents one particular user identified by its *id*.

+ Parameters
    + id (required, string, `a5595d9b-75a5-4a18-8cd9-2cff9907b7ac`) ... Id of a user.

+ Model (application/json)
    HATEOAS/JSON representation of User resource.

    + login (required, string, `m1ch3l`)
    + role (required, string, `user`)
    + email (required, string, `m1ch3l@pathwar.net`)
    + _id (required, uuid, `a5595d9b-75a5-4a18-8cd9-2cff9907b7ac`)

    + Headers

            ETag: 8f5d7df0210b75992b41834329c0abdea9a02bc2
            Last-Modified: Wed, 07 Jan 2015 16:43:17 GMT

    + Body

            {
                "_created": "Wed, 07 Jan 2015 16:43:17 GMT",
                "_etag": "8f5d7df0210b75992b41834329c0abdea9a02bc2",
                "_id": "a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                "_links": {
                    "collection": {
                        "href": "users",
                        "title": "users"
                    },
                    "parent": {
                        "href": "/",
                        "title": "home"
                    },
                    "self": {
                        "href": "users/a5595d9b-75a5-4a18-8cd9-2cff9907b7ac",
                        "title": "user"
                    }
                },
                "_updated": "Wed, 07 Jan 2015 16:43:17 GMT",
                "email": "m1ch3l@pathwar.net",
                "login": "m1ch3l",
                "role": "superuser"
            }

### Retrieve Person [GET]
Return the information for the Person
+ Request JSON
    + Headers

            Accept: application/json

+ Response 200

    [Person][]

+ Response 404 (application/json)

            {
                "_error": {
                    "code": 404,
                    "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."
                },
                "_status": "ERR"
            }

### Edit Person [PATCH]
Edit the information of the Person

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }

### Delete Person [DELETE]
Delete a Person
+ Request JSON
    + Headers

            Accept: application/json

+ Response 200

    [Person][]

+ Response 404 (application/json)

            {
                "_error": {
                    "code": 404,
                    "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."
                },
                "_status": "ERR"
            }
